{"version":3,"file":"slider.js","sourceRoot":"","sources":["../../../../src/components/organisms/slider/slider.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, State, Listen, Prop } from '@stencil/core';\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { throttle } from '../../../utils/throttle';\n\n/**\n * The Slider component.\n */\n@Component({\n  tag: 'bs-slider',\n  styleUrl: 'slider.scss',\n  shadow: true,\n})\nexport class BsSlider {\n  private teaserSliderRef: HTMLDivElement;\n\n  private navigationRef: HTMLDivElement;\n\n  /** States */\n  @State() slides: boolean = true;\n\n  @State() activeIndex: number = 0;\n\n  /** Props */\n  @Prop() navigationOverlay: boolean = false;\n\n  /** listeners */\n  @Listen('resize', { target: 'window' })\n  handleScreenResized() {\n    this.throttleMethod();\n  }\n\n  /** Methods */\n  private onResize = () => {\n    this.slides =\n      this.teaserSliderRef && this.teaserSliderRef.scrollWidth > this.teaserSliderRef.offsetWidth;\n  };\n\n  private throttleMethod = throttle(this.onResize, 1000);\n\n  private onPreviousSlide = () => {\n    if (this.teaserSliderRef.scrollLeft === 0) return;\n    this.activeIndex -= 1;\n\n    this.scrollSlider();\n  };\n\n  private onNextSlide = () => {\n    if (\n      Math.abs(this.teaserSliderRef.scrollLeft) + this.teaserSliderRef.clientWidth ===\n      this.teaserSliderRef.scrollWidth\n    )\n      return;\n    this.activeIndex += 1;\n\n    this.scrollSlider();\n  };\n\n  private scrollSlider = () => {\n    let scrollDistance;\n    const activeSliderItem = (\n      this.teaserSliderRef.children[0] as HTMLSlotElement\n    ).assignedElements()[this.activeIndex] as HTMLElement;\n\n    if (document.dir === 'rtl') {\n      scrollDistance =\n        activeSliderItem.offsetLeft +\n        activeSliderItem.offsetWidth -\n        (this.teaserSliderRef.offsetLeft + this.teaserSliderRef.offsetWidth);\n    } else {\n      scrollDistance = activeSliderItem.offsetLeft - this.teaserSliderRef.offsetLeft;\n    }\n\n    this.teaserSliderRef.scrollTo({\n      top: 0,\n      left: scrollDistance,\n      behavior: 'smooth',\n    });\n  };\n\n  /** lifecycle hooks */\n  componentDidLoad() {\n    this.slides = this.teaserSliderRef.scrollWidth > this.teaserSliderRef.offsetWidth;\n\n    if (this.slides) {\n      this.teaserSliderRef.addEventListener(\n        'scroll',\n        throttle(() => {\n          if (\n            Math.abs(this.teaserSliderRef.scrollLeft) + this.teaserSliderRef.offsetWidth >=\n            this.teaserSliderRef.scrollWidth\n          ) {\n            this.navigationRef.classList.add('navigation--transparent');\n          } else {\n            this.navigationRef.classList.remove('navigation--transparent');\n          }\n        }, 0)\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.slides && (\n          <div class={this.navigationOverlay ? 'overlay' : 'head'}>\n            <div\n              class={`navigation ${this.navigationOverlay ? 'navigation--overlay' : ''}`}\n              ref={(el) => {\n                this.navigationRef = el;\n              }}\n            >\n              <div class=\"navigation-back\">\n                <bs-click-action\n                  name=\"previous\"\n                  onBsClickAction={this.onPreviousSlide}\n                  tagClass=\"navigation-button\"\n                  ariaLabelText=\"backward\"\n                >\n                  <bs-icon name={IconName.ArrowBackward} />\n                </bs-click-action>\n              </div>\n              <div class=\"navigation-forward\">\n                <bs-click-action\n                  name=\"next\"\n                  onBsClickAction={this.onNextSlide}\n                  tagClass=\"navigation-button\"\n                  ariaLabelText=\"forward\"\n                >\n                  <bs-icon name={IconName.ArrowForward} />\n                </bs-click-action>\n              </div>\n            </div>\n          </div>\n        )}\n        <div\n          class=\"teaser-slider\"\n          ref={(el) => {\n            this.teaserSliderRef = el;\n          }}\n        >\n          <slot name=\"slider-item\" />\n        </div>\n      </Host>\n    );\n  }\n}\n"]}