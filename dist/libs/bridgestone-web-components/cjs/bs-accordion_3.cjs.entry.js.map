{"file":"bs-accordion.bs-accordion-item.bs-product-card.entry.cjs.js","mappings":"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","names":["parseIfString","h","Host","isEmpty","__decorate","Memoize","TitleTag","TitleSize","IconName","TitleColor"],"sources":["./src/components/organisms/accordion/accordion.scss?tag=bs-accordion&encapsulation=shadow","./src/components/organisms/accordion/accordion.tsx","./src/components/molecules/accordion-item/accordion-item.scss?tag=bs-accordion-item&encapsulation=shadow","./src/components/molecules/accordion-item/accordion-item.tsx","./src/components/molecules/product-card/product-card.scss?tag=bs-product-card&encapsulation=shadow","./src/components/molecules/product-card/product-card.tsx"],"sourcesContent":[":host {\n  @include reset-host;\n}\n\n:host .accordion {\n  font-size: rem(20);\n  list-style: none;\n}\n","import { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { Component, Host, h, Prop, Listen } from '@stencil/core';\nimport { BsTitle } from '../../atoms/title/title';\n\n/**\n * The Accordion component.\n */\n@Component({\n  tag: 'bs-accordion',\n  styleUrl: 'accordion.scss',\n  shadow: true,\n})\nexport class BsAccordion {\n  /**\n   * Section's title.\n   */\n  @Prop() mainTitle?: BsTitle | string;\n\n  @Memoize('mainTitle')\n  get parsedMainTitle(): BsTitle {\n    return parseIfString(this.mainTitle);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  @Listen('bsAccordionStateAction')\n  bsAccordionStateHandler(event: CustomEvent<boolean>) {\n    const target = event.target as HTMLBsAccordionItemElement;\n\n    target.active = !target.active;\n  }\n\n  render() {\n    return (\n      <Host>\n        <section class=\"accordion-wrapper\">\n          {/* Main title */}\n          {!isEmpty(this.parsedMainTitle) && !isEmpty(this.parsedMainTitle.text) && (\n            <bs-title\n              variant={this.parsedMainTitle.variant}\n              color={this.parsedMainTitle.color}\n              tag={this.parsedMainTitle.tag}\n              text={this.parsedMainTitle.text}\n              size={this.parsedMainTitle.size}\n            />\n          )}\n          <ul class=\"accordion\" aria-label=\"Accordion Control Group\">\n            <slot name=\"accordion-item\" />\n          </ul>\n        </section>\n      </Host>\n    );\n  }\n}\n",":host {\n  @include reset-host;\n  flex: 1;\n}\n\n:host .accordion-item {\n  margin-bottom: rem(-1);\n  list-style: none;\n  border-bottom: rem(1) solid $gray-800;\n\n  &.is-active .accordion-panel {\n    display: block;\n  }\n\n  &.is-active .accordion-trigger-icon {\n    transform: scaleY(-100%);\n  }\n}\n\n:host .accordion-trigger {\n  display: flex;\n  gap: rem(20);\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  padding: rem(24) 0;\n  font: inherit;\n  line-height: line-height(default);\n  color: inherit;\n\n  text-align: left;\n  cursor: pointer;\n\n  background-color: transparent;\n  border: 0;\n\n  &:disabled {\n    pointer-events: none;\n    cursor: default;\n  }\n}\n\n:host .accordion-trigger-icon {\n  font-size: rem(24);\n}\n\n:host .accordion-panel {\n  display: none;\n}\n","import { Component, Event, EventEmitter, Host, Prop, Watch, h } from '@stencil/core';\n\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { TitleSize, TitleTag } from '../../atoms/title/title.types';\n\n@Component({\n  tag: 'bs-accordion-item',\n  styleUrl: 'accordion-item.scss',\n  shadow: true,\n})\nexport class BsAccordionItem {\n  /**\n   * Accordion's unique identifier used for accessibility.\n   */\n  @Prop() identifier!: string;\n\n  // eslint-disable-next-line class-methods-use-this\n  @Watch('identifier')\n  validateIdentifier(newValue: string) {\n    // don't allow `thingToDo` to be the empty string\n    const isBlank = typeof newValue !== 'string' || newValue === '';\n\n    if (isBlank) {\n      throw new Error('BsAccordionItem identifier is a required property and cannot be empty');\n    }\n  }\n\n  /**\n   * Accordion's title.\n   */\n  @Prop() accordionItemTitle: string;\n\n  /**\n   * Accordion's active state\n   */\n  @Prop() active?: boolean;\n\n  /**\n   * Is the accordion expandable?\n   */\n  @Prop({ reflect: true }) expandable?: boolean = true;\n\n  /**\n   * To set the title tag\n   */\n  @Prop() itemTag: TitleTag = TitleTag.H3;\n\n  /**\n   * To set the title size\n   */\n  @Prop() itemSize: TitleSize = TitleSize.Head3;\n\n  /**\n   * Accordion's event emitter\n   */\n  @Event() bsAccordionStateAction: EventEmitter<Boolean>;\n\n  private bsAccordionStateActionHandler(state: Boolean) {\n    this.bsAccordionStateAction.emit(state);\n  }\n\n  render() {\n    const itemIdentifier = this.identifier.replace(/\\s+/g, '-').toLowerCase();\n\n    return (\n      <Host>\n        <li class={`accordion-item ${this.expandable && this.active ? 'is-active' : ''}`}>\n          {/* Button */}\n          <button\n            class=\"accordion-trigger\"\n            type=\"button\"\n            aria-controls={itemIdentifier}\n            aria-expanded={this.expandable && this.active && this.active.toString()}\n            id={`accordion-${itemIdentifier}`}\n            onClick={() => {\n              this.bsAccordionStateActionHandler(this.active);\n            }}\n            tabIndex={this.expandable ? 1 : -1}\n            disabled={!this.expandable}\n          >\n            <bs-title\n              tag={this.itemTag}\n              size={this.itemSize}\n              class=\"accordion-trigger-title\"\n              text={this.accordionItemTitle}\n            />\n\n            {this.expandable && (\n              <bs-icon\n                aria-hidden=\"true\"\n                class=\"accordion-trigger-icon\"\n                name={IconName.CaretDownward}\n              />\n            )}\n          </button>\n          {/* Content */}\n          <div\n            class=\"accordion-panel\"\n            role=\"region\"\n            aria-hidden={(!this.active).toString()}\n            id={itemIdentifier}\n          >\n            <div class=\"accordion-panel-content\">\n              <slot name=\"accordion-content\" />\n            </div>\n          </div>\n        </li>\n      </Host>\n    );\n  }\n}\n",":host {\n  @include reset-host;\n}\n\n:host .card {\n  display: flex;\n  flex-direction: column;\n  gap: rem(16);\n  align-items: center;\n  width: rem(210);\n  height: 100%;\n  padding: rem(10);\n  border: 1px solid $gray-800;\n  border-radius: rem(8);\n\n  @include mq('min', 'xs') {\n    width: rem(285);\n  }\n\n  @include mq('min', 'md') {\n    width: rem(330);\n  }\n}\n\n.image {\n  display: flex;\n}\n\n.content {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: flex-start;\n  width: 100%;\n  max-height: 100%;\n  overflow: hidden;\n\n  .title {\n    margin-bottom: rem(10);\n    line-height: 1.1;\n  }\n\n  .text {\n    font-size: rem(12);\n  }\n}\n","import { Component, Host, h, Prop } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport type { BsImage } from '../../atoms/image/image';\nimport { TitleColor, TitleSize, TitleTag } from '../../atoms/title/title.types';\n\n/**\n * Product card component.\n */\n@Component({\n  tag: 'bs-product-card',\n  styleUrl: 'product-card.scss',\n  shadow: true,\n})\nexport class BsProductCard {\n  /** Props */\n  /**\n   * The product card title.\n   */\n  @Prop() cardTitle: string;\n\n  /**\n   * The cta label.\n   */\n  @Prop() cardText: string;\n\n  /**\n   * The product card image.\n   */\n  @Prop() cardImage: BsImage | string;\n\n  @Memoize('cardImage')\n  get parsedCardImage(): BsImage {\n    return parseIfString(this.cardImage);\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"card\">\n          <div class=\"image\">\n            <bs-image {...this.parsedCardImage} caption=\"\" />\n          </div>\n          <div class=\"content\">\n            <bs-title\n              class=\"title\"\n              tag={TitleTag.Span}\n              size={TitleSize.Head4}\n              text={this.cardTitle}\n              color={TitleColor.Black}\n            />\n            <bs-text class=\"text\" text={this.cardText} />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}