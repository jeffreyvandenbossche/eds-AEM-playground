{"file":"bs-form-select.entry.js","mappings":"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","names":[],"sources":["./src/components/molecules/form-select/form-select.types.ts","./src/components/molecules/form-select/form-select.scss?tag=bs-form-select&encapsulation=shadow","./src/components/molecules/form-select/form-select.tsx"],"sourcesContent":["export type SelectOption = {\n  value: string;\n  text: string;\n  selected?: boolean;\n  disabled?: boolean;\n};\n\nexport enum KeyboardCodes {\n  ArrowDown = 'ArrowDown',\n  ArrowUp = 'ArrowUp',\n  Escape = 'Escape',\n  Enter = 'Enter',\n}\n\nexport type AttributeItem = {\n  key: string;\n  value: string;\n};\n",":host {\n  @include reset-host;\n}\n\n:host .custom-select {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  padding: rem(24) rem(24) 0;\n  text-align: left;\n  cursor: pointer;\n  background: unset;\n  border: 0;\n\n  &:focus {\n    outline: 2px solid #{$red-300};\n    outline-offset: 3px;\n  }\n}\n\n:host .custom-options-wrapper {\n  position: absolute;\n  top: calc(100% + 1px);\n  left: 0;\n  width: 100%;\n  max-height: 0;\n  overflow: auto;\n  box-shadow: 0 rem(2) rem(5) $gray-700;\n  transition: max-height 0.5s ease;\n  @include z-index('modal');\n}\n\n:host .custom-option {\n  display: flex;\n  align-items: center;\n  min-height: rem(48);\n  padding-left: rem(24);\n  cursor: pointer;\n  background-color: $white;\n  border-bottom: 1px solid $gray-800;\n\n  &:hover {\n    background-color: $gray-900;\n    outline: none;\n  }\n\n  &:focus {\n    background-color: $gray-800;\n    outline: none;\n  }\n\n  &.is-disabled {\n    color: $gray-800;\n    cursor: not-allowed;\n    background-color: $white;\n  }\n}\n\n:host([focused]) .custom-options-wrapper {\n  max-height: rem(200);\n}\n\n.hidden {\n  display: none;\n}\n\n:host-context(html[dir='rtl']) {\n  .custom-select {\n    text-align: right;\n  }\n\n  .custom-option {\n    padding-right: rem(24);\n    padding-left: 0;\n  }\n}\n","import { Component, Element, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { IconName } from '../../../components';\nimport { KeyboardCodes, SelectOption } from './form-select.types';\n\n/**\n * The form select component.\n */\n@Component({\n  tag: 'bs-form-select',\n  styleUrl: 'form-select.scss',\n  shadow: true,\n})\nexport class BsFormSelect {\n  @Element() hostElement: HTMLBsFormSelectElement;\n\n  private formFieldRef: HTMLBsFormFieldElement;\n\n  private selectElRef: HTMLSelectElement;\n\n  private selectWrap: HTMLButtonElement;\n\n  private customOptions: HTMLLIElement[] = [];\n\n  /**\n   * The value of the form field\n   */\n  @State() value?: SelectOption;\n\n  /**\n   * Wether or not the input field is filled\n   */\n  @State() filled: boolean = false;\n\n  /**\n   * Wether or not the input field is focused\n   */\n  @State() focused: boolean = false;\n\n  /**\n   * Wether or not the input field is invalid\n   */\n  @State() invalid: boolean = false;\n\n  /**\n   * Wether or not the input field is invalid\n   */\n  @State() activeOption: number | undefined = undefined;\n\n  @Watch('activeOption')\n  validateValue(newValue: number, oldValue: number) {\n    if (typeof newValue === 'undefined') return;\n\n    if (newValue > oldValue) {\n      this.activeOption = newValue >= this.parsedOptions.length ? 0 : newValue;\n    } else if (newValue < oldValue) {\n      this.activeOption = newValue < 0 ? this.parsedOptions.length - 1 : newValue;\n    } else {\n      this.activeOption = newValue;\n    }\n\n    const options = this.selectWrap.querySelectorAll('.custom-option') as NodeListOf<HTMLLIElement>;\n\n    while (options[this.activeOption].ariaDisabled === 'true') {\n      this.activeOption += 1;\n    }\n\n    options[this.activeOption].focus();\n  }\n\n  /**\n   * The unique name to identify the form element\n   */\n  @Prop() name!: string;\n\n  /**\n   * The label describing the form field\n   */\n  @Prop() label!: string;\n\n  /**\n   * The list of options that will populate the select field.\n   */\n  @Prop() options: SelectOption[] | string;\n\n  @Memoize('options')\n  get parsedOptions(): SelectOption[] {\n    return parseIfString(this.options);\n  }\n\n  /**\n   * Wether or not the input field is required\n   */\n  @Prop() required?: boolean = false;\n\n  /**\n   * The error message to be displayed when the required field remains empty\n   */\n  @Prop() requiredMessage: string;\n\n  /**\n   * The icon to be displayed on the right hand side of the form field\n   */\n  @Prop() icon?: IconName;\n\n  private focus = () => {\n    this.focused = true;\n    this.selectWrap.addEventListener('keydown', this.handleKeyDown, true);\n    this.selectWrap.querySelector('.custom-options-wrapper').setAttribute('aria-expanded', 'true');\n\n    for (let i = 0; i < this.selectElRef.childNodes.length; i += 1) {\n      if ((this.selectElRef.childNodes[i] as HTMLOptionElement).selected) {\n        this.activeOption = i;\n      }\n    }\n  };\n\n  private focusOut = () => {\n    this.focused = false;\n    this.selectWrap.removeEventListener('keydown', this.handleKeyDown, true);\n    this.selectWrap.querySelector('.custom-options-wrapper').setAttribute('aria-expanded', 'false');\n    this.activeOption = undefined;\n  };\n\n  private handleFocusOut(e: MouseEvent) {\n    if ((e.target as HTMLElement).nodeName !== 'BS-FORM-SELECT') {\n      this.focused = false;\n    }\n  }\n\n  private handleOptionfocus(direction: KeyboardCodes.ArrowUp | KeyboardCodes.ArrowDown) {\n    if (direction === KeyboardCodes.ArrowDown) {\n      this.activeOption += 1;\n    } else if (direction === KeyboardCodes.ArrowUp) {\n      this.activeOption -= 1;\n    }\n  }\n\n  private handleKeyDown = (e: KeyboardEvent) => {\n    switch (e.code) {\n      case KeyboardCodes.Enter:\n        this.handleSelect(e);\n        this.focusOut();\n        break;\n\n      case KeyboardCodes.ArrowDown:\n        this.handleOptionfocus(KeyboardCodes.ArrowDown);\n        break;\n\n      case KeyboardCodes.ArrowUp:\n        this.handleOptionfocus(KeyboardCodes.ArrowUp);\n        break;\n\n      case KeyboardCodes.Escape:\n        this.focusOut();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  private handleSelect(e: PointerEvent | KeyboardEvent) {\n    const nativeSelect = this.selectElRef;\n    const selected = e.target as HTMLLIElement;\n    const selectedIndex = Number(selected.dataset.index) || 0;\n\n    if (nativeSelect.options[selectedIndex].disabled) return;\n    nativeSelect.selectedIndex = selectedIndex;\n    nativeSelect.options[selectedIndex].click();\n    this.value = nativeSelect.options[selectedIndex];\n    this.formFieldRef.value = this.value?.value;\n    this.focusOut();\n    this.filled = true;\n  }\n\n  private handleSelectedProp() {\n    for (let i = 0; i < this.selectElRef.options.length; i += 1) {\n      this.selectElRef.options[i].addEventListener('click', this.handleSelect.bind(this));\n\n      if (this.selectElRef.options[i].selected) {\n        this.selectElRef.options[i].click();\n      }\n    }\n  }\n\n  componentDidRender() {\n    document.addEventListener('click', this.handleFocusOut.bind(this));\n  }\n\n  componentDidLoad() {\n    this.customOptions.forEach((option) => {\n      option.addEventListener('click', this.handleSelect.bind(this));\n    });\n    this.hostElement.addEventListener('focusout', this.focusOut.bind(this));\n\n    this.handleSelectedProp();\n  }\n\n  disconnectedCallback() {\n    document.removeEventListener('click', this.handleFocusOut.bind(this));\n    this.hostElement.removeEventListener('focusout', this.focusOut.bind(this));\n  }\n\n  render() {\n    return (\n      <Host focused={this.focused}>\n        <bs-form-field\n          ref={(el) => {\n            this.formFieldRef = el;\n          }}\n          value={this.value?.value}\n          name={this.name}\n          focused={this.focused || this.filled}\n          filled={this.filled}\n          invalid={this.invalid}\n          required={this.required}\n          requiredMessage={this.requiredMessage}\n          label={this.label}\n          icon={this.icon}\n        >\n          <button\n            slot=\"form-element\"\n            ref={(el) => {\n              this.selectWrap = el;\n            }}\n            id={this.name}\n            class=\"custom-select\"\n            onFocus={!this.focused ? this.focus : this.focusOut}\n            onClick={!this.focused && this.focus}\n            tabIndex={0}\n          >\n            <span class=\"custom-select-value\">{this.value?.text}</span>\n            <select\n              ref={(el: HTMLSelectElement) => {\n                this.selectElRef = el;\n\n                return this.selectElRef;\n              }}\n              class=\"hidden\"\n              required={this.required}\n              id={`hidden-${this.name}`}\n              name={this.name}\n              tabIndex={-1}\n            >\n              {this.parsedOptions.map((option, index) => (\n                <option\n                  selected={option.selected}\n                  aria-selected={option.selected}\n                  value={option.value}\n                  disabled={option.disabled}\n                  data-index={index}\n                >\n                  {option.text}\n                </option>\n              ))}\n            </select>\n            <div aria-labelledby={this.name}>\n              <ul\n                class=\"custom-options-wrapper\"\n                aria-haspopup=\"listbox\"\n                aria-expanded=\"false\"\n                role=\"group\"\n              >\n                {this.parsedOptions.map((option, index) => (\n                  <li\n                    ref={(el) => {\n                      this.customOptions.push(el);\n                    }}\n                    role=\"option\"\n                    class={`custom-option ${option.disabled ? 'is-disabled' : ''}`}\n                    tabindex={-1}\n                    aria-disabled={option.disabled ? 'true' : false}\n                    aria-selected={option.selected}\n                    data-index={index}\n                  >\n                    {option.text}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </button>\n          <label slot=\"form-label\" class=\"form-label\" htmlFor={this.name} title={this.label}>\n            {this.label}\n            {this.required ? <span aria-hidden=\"true\">&nbsp;*</span> : ''}\n          </label>\n        </bs-form-field>\n      </Host>\n    );\n  }\n}\n"],"version":3}