{"file":"bs-form-container.entry.js","mappings":";;;;AAAA,MAAM,gBAAgB,GAAG,4gMAA4gM;;MCWxhM,eAAe;;;IAGlB,0BAAqB,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;yBAQT,KAAK;yBAEL,KAAK;2BAEH,KAAK;;;;;;;;;EAmCzC,MAAM,sBAAsB,CAAC,CAAc;IACzC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;MAC9B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;MAC3B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;MAC7B,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC;QACvB,IAAI,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;UAC7C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;UAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;OACF,CAAC,CAAC;KACJ;GACF;;;;EAMO,MAAM,YAAY;IACxB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC3B,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;GACpE;EAEO,WAAW;IACjB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAEjF,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC;GAC5B;EAEO,OAAO;IACb,MAAM,QAAQ,GAAG,EAAE,CAAC;IAEpB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK;MAC3B,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;KACpC,CAAC,CAAC;IAEH,OAAO,QAAQ,CAAC;GACjB;EAEO,MAAM,aAAa;IACzB,IAAI;MACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE;QACxC,MAAM,EAAE,MAAM;QACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QACpC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;SACnC;OACF,CAAC,CAAC;MAEH,IAAI,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QACxD,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC;OAC7C;WAAM;QACL,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;OAC7B;KACF;IAAC,WAAM;MACN,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;KAC7B;YAAS;MACR,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;KAC5B;GACF;;;;EAMD,gBAAgB;IACd,IAAI,CAAC,SAAS,GAAG,oBAAoB,CACnC,eAAe,EACf,IAAI,CAAC,WAAW,CACW,CAAC;GAC/B;;;;EAMD,MAAM;IACJ,QACE,EAAC,IAAI,QACH,YACE,KAAK,EAAE,kBAAkB,IAAI,CAAC,aAAa,GAAG,YAAY,GAAG,EAAE,EAAE,EACjE,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,MAAM,EAAC,QAAQ,IAEf,eAAQ,EACP,IAAI,CAAC,aAAa,IAAI,SAAG,KAAK,EAAC,YAAY,IAAE,IAAI,CAAC,kBAAkB,WAAW,EAC/E,IAAI,CAAC,eAAe,IAAI,SAAG,KAAK,EAAC,YAAY,IAAE,IAAI,CAAC,kBAAkB,WAAW,CAC7E,CACF,EACP;GACH;;;;;;;","names":[],"sources":["./src/components/organisms/form-container/form-container.scss?tag=bs-form-container","./src/components/organisms/form-container/form-container.tsx"],"sourcesContent":[":host {\n  @include reset-host;\n}\n\n.form-error {\n  padding: rem(15);\n  margin: rem(20) 0;\n  color: $primary;\n  text-align: center;\n  border: 1px solid $primary;\n}\n\n.is-sending {\n  opacity: 0.5;\n}\n","import { Component, Host, h, State, Element, Listen, Prop } from '@stencil/core';\nimport { deepQuerySelectorAll } from '../../../utils/deepQuerySelectorAll';\n\n/**\n * The form container component.\n */\n@Component({\n  tag: 'bs-form-container',\n  styleUrl: 'form-container.scss',\n  shadow: false,\n})\nexport class BsFormContainer {\n  private allFields: HTMLBsFormFieldElement[];\n\n  private acceptedRequestStatus = [200, 201];\n\n  @Element() hostElement: HTMLBsFormContainerElement;\n\n  /**\n   * State\n   */\n\n  @State() formHasErrors: boolean = false;\n\n  @State() isFormSending: boolean = false;\n\n  @State() submitHasFailed: boolean = false;\n\n  /**\n   * Props\n   */\n\n  /**\n   * The endpoint for the submit request.\n   */\n\n  @Prop() action: string;\n\n  /**\n   * Message to inform the user there are issues with the filled in values.\n   */\n\n  @Prop() invalidFormMessage: string;\n\n  /**\n   * Message to inform the usere something went wrong while submitting the form.\n   */\n\n  @Prop() submitErrorMessage: string;\n\n  /**\n   * The page the user is redirected to in case of a successfull submit.\n   */\n\n  @Prop() successRedirect: string;\n\n  /**\n   * Events\n   */\n\n  @Listen('bsButtonClick')\n  async onBsButtonClickHandler(e: CustomEvent) {\n    if (e.detail.type === 'submit') {\n      this.formHasErrors = false;\n      this.submitHasFailed = false;\n      this.validateForm().then(() => {\n        if (this.isFormValid() && !this.isFormSending) {\n          this.isFormSending = true;\n          this.submitRequest();\n        }\n      });\n    }\n  }\n\n  /**\n   * Methods\n   */\n\n  private async validateForm() {\n    this.formHasErrors = false;\n    await Promise.all(this.allFields.map((field) => field.validate()));\n  }\n\n  private isFormValid() {\n    this.formHasErrors = this.allFields.map((field) => field.invalid).includes(true);\n\n    return !this.formHasErrors;\n  }\n\n  private getData() {\n    const formData = {};\n\n    this.allFields.forEach((field) => {\n      formData[field.name] = field.value;\n    });\n\n    return formData;\n  }\n\n  private async submitRequest() {\n    try {\n      const response = await fetch(this.action, {\n        method: 'POST',\n        body: JSON.stringify(this.getData()),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (this.acceptedRequestStatus.includes(response.status)) {\n        window.location.href = this.successRedirect;\n      } else {\n        this.submitHasFailed = true;\n      }\n    } catch {\n      this.submitHasFailed = true;\n    } finally {\n      this.isFormSending = false;\n    }\n  }\n\n  /**\n   * Lifecycle hooks\n   */\n\n  componentDidLoad() {\n    this.allFields = deepQuerySelectorAll(\n      'bs-form-field',\n      this.hostElement\n    ) as HTMLBsFormFieldElement[];\n  }\n\n  /**\n   * Render\n   */\n\n  render() {\n    return (\n      <Host>\n        <form\n          class={`form-container ${this.isFormSending ? 'is-sending' : ''}`}\n          action={this.action}\n          method=\"dialog\"\n        >\n          <slot />\n          {this.formHasErrors && <p class=\"form-error\">{this.invalidFormMessage}&nbsp;</p>}\n          {this.submitHasFailed && <p class=\"form-error\">{this.submitErrorMessage}&nbsp;</p>}\n        </form>\n      </Host>\n    );\n  }\n}\n"],"version":3}