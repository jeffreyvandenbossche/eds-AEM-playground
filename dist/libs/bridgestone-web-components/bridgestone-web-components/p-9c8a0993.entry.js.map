{"version":3,"names":["experienceZoneScreenCss","BsExperienceZoneScreen","this","toggleVideoPlayState","state","layout","ExperienceZoneLayout","Video","videoId","parsedComponents","tag","data","bsYoutubeControllerClick","emit","id","action","value","components","undefined","parseIfString","handleActiveChange","isActive","componentDidLoad","active","render","h","Host","class","isEmpty","Array","from","map","_value","i","name","component","Tag","Object","assign","disclaimer","contained","text","size","TextSize","Small","color","TextColor","Default","__decorate","Memoize","experienceZoneStoryCss","handleNextMedia","updateIndex","activeIndex","newValue","parsedStoryData","screens","length","experienceZoneScreenRef","classList","add","addEventListener","remove","storyData","overlayRef","focusTrap","handleBsSwipeAction","e","detail","direction","TouchDirections","Left","nextSlide","Right","previousSlide","ref","el","storyTitle","hideNavigation","logo","compareBreakpoint","Breakpoint","md","storyLogo","onClick","slot"],"sources":["./src/components/molecules/experience-zone-screen/experience-zone-screen.scss?tag=bs-experience-zone-screen&encapsulation=shadow","./src/components/molecules/experience-zone-screen/experience-zone-screen.tsx","./src/components/molecules/experience-zone-story/experience-zone-story.scss?tag=bs-experience-zone-story&encapsulation=shadow","./src/components/molecules/experience-zone-story/experience-zone-story.tsx"],"sourcesContent":[":host {\n  @include reset-host;\n  height: 100%;\n  animation: fade-in 0.2s linear forwards;\n}\n\n:host .experience-zone-screen {\n  display: flex;\n  flex-direction: column;\n  gap: rem(16);\n  width: 100%;\n  height: 100%;\n  color: $white;\n\n  @include mq('min', 'md') {\n    gap: rem(32);\n  }\n}\n\n:host .screen-container {\n  flex-grow: 1;\n}\n\n:host .screen {\n  display: grid;\n  flex: 1;\n  gap: rem(20);\n\n  &--one,\n  &--video {\n    grid-template-areas: 'one';\n    grid-template-rows: 100%;\n    grid-template-columns: 100%;\n\n    *:nth-child(1) {\n      display: flex;\n    }\n  }\n\n  &--video .screen-item {\n    background-color: transparent;\n  }\n\n  &--two {\n    grid-template-areas:\n      'one'\n      'two';\n    grid-template-rows: 1fr 1fr;\n    grid-template-columns: 1fr;\n\n    @include mq('min', 'xl') {\n      grid-template-areas: 'one two';\n      grid-template-rows: auto;\n      grid-template-columns: 1fr 1fr;\n    }\n\n    *:nth-child(1),\n    *:nth-child(2) {\n      display: flex;\n    }\n  }\n\n  &--three {\n    grid-template-areas:\n      'one one'\n      'two three';\n    grid-template-rows: 1fr 50vw;\n    grid-template-columns: 1fr 1fr;\n\n    @include mq('min', 'xl') {\n      grid-template-areas:\n        'one two'\n        'one three';\n      grid-template-rows: 1fr 1fr;\n      grid-template-columns: auto 33%;\n    }\n\n    *:nth-child(1),\n    *:nth-child(2),\n    *:nth-child(3) {\n      display: flex;\n    }\n  }\n\n  *:nth-child(1) {\n    grid-area: one;\n  }\n\n  *:nth-child(2) {\n    grid-area: two;\n  }\n\n  *:nth-child(3) {\n    grid-area: three;\n  }\n}\n\n:host .screen-item {\n  position: relative;\n  display: none;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  text-align: center;\n  background-color: $gray-100;\n  border-radius: rem(8);\n}\n\n:host .bs-title-screen,\n:host .bs-quote-screen {\n  padding: rem(20);\n  overflow-y: auto;\n\n  @include mq('min', 'md') {\n    padding: rem(40);\n  }\n}\n\n@keyframes fade-in {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n}\n","import { Component, Host, h, Prop, Watch, Event, EventEmitter } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport {\n  ExperienceZoneComponent,\n  ExperienceZoneLayout,\n} from '../experience-zone/experience-zone.types';\nimport { TextColor, TextSize } from '../../atoms/text/text.types';\nimport { YoutubeControlClickEvent } from '../youtube-control/youtube-control.types';\n\n/**\n * Experience Zone screen component.\n */\n@Component({\n  tag: 'bs-experience-zone-screen',\n  styleUrl: 'experience-zone-screen.scss',\n  shadow: true,\n})\nexport class BsExperienceZoneScreen {\n  /** Is this screen currently active? */\n  @Prop() active?: boolean = false;\n\n  /**\n   * The Experience Zone screen layout name.\n   */\n  @Prop() layout!: ExperienceZoneLayout;\n\n  /**\n   * The Experience Zone screen disclaimer.\n   */\n  @Prop() disclaimer?: string;\n\n  /**\n   * The Experience Zone card image.\n   */\n  @Prop() components?: ExperienceZoneComponent[] | string;\n\n  @Memoize('components')\n  get parsedComponents(): ExperienceZoneComponent[] {\n    if (this.components !== undefined) {\n      return parseIfString(this.components);\n    }\n\n    return [];\n  }\n\n  /** Events */\n  /** Emits youtube control event action: 'play' */\n  @Event() bsYoutubeControllerClick: EventEmitter<YoutubeControlClickEvent>;\n\n  /** Watchers */\n  @Watch('active')\n  handleActiveChange(isActive: boolean) {\n    this.toggleVideoPlayState(isActive);\n  }\n\n  /** Methods */\n  private toggleVideoPlayState = (state) => {\n    if (this.layout === ExperienceZoneLayout.Video) {\n      const videoId =\n        this.parsedComponents[0].tag === 'bs-video-card' && this.parsedComponents[0].data.videoId;\n\n      this.bsYoutubeControllerClick.emit({ id: videoId, action: 'play', value: state ? 1 : 0 });\n    }\n  };\n\n  /** lifecycle hooks */\n  componentDidLoad() {\n    this.toggleVideoPlayState(this.active);\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"experience-zone-screen\">\n          <div class={`screen screen--${this.layout}`}>\n            {isEmpty(this.parsedComponents)\n              ? Array.from(Array(3)).map((_value, i) => (\n                  <div class={`screen-item`}>\n                    <slot name={`item-${i}`}></slot>\n                  </div>\n                ))\n              : this.parsedComponents.map((component) => {\n                  const Tag = component.tag as any;\n\n                  return (\n                    <div class={`screen-item ${Tag}-screen`}>\n                      <Tag {...component.data} />\n                    </div>\n                  );\n                })}\n          </div>\n          {this.disclaimer && (\n            <bs-container contained={true}>\n              <bs-text text={this.disclaimer} size={TextSize.Small} color={TextColor.Default} />\n            </bs-container>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}\n",":host {\n  @include reset-host;\n}\n\n:host .experience-zone-story {\n  position: relative;\n  height: 100%;\n}\n\n:host .fade-out {\n  animation: fade-out 0.2s linear forwards;\n}\n\n@keyframes fade-out {\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n}\n","import { Component, Host, h, Prop, State, Watch, Listen } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport {\n  ExperienceZoneLayout,\n  ExperienceZoneStory,\n} from '../experience-zone/experience-zone.types';\nimport { Breakpoint, compareBreakpoint } from '../../../utils/breakpoints';\nimport { TouchDirections } from '../../layouts/default-layout/default-layout.types';\nimport { BsVideoCard } from '../video-card/video-card';\n\n/**\n * Experience Zone story component.\n */\n@Component({\n  tag: 'bs-experience-zone-story',\n  styleUrl: 'experience-zone-story.scss',\n  shadow: true,\n})\nexport class BsExperienceZoneScreen {\n  private experienceZoneScreenRef: HTMLBsExperienceZoneScreenElement;\n\n  private overlayRef: HTMLBsDarkOverlayElement;\n\n  @State() activeIndex: number = 0;\n\n  /** Is this story currently active? */\n  @Prop() active?: boolean = false;\n\n  /** Should navigation arrows be hidden? */\n  @Prop() hideNavigation?: boolean = false;\n\n  /**\n   * The Experience Zone story data.\n   */\n  @Prop() storyData: ExperienceZoneStory | string;\n\n  @Memoize('storyData')\n  get parsedStoryData(): ExperienceZoneStory {\n    return parseIfString(this.storyData);\n  }\n\n  /** Watchers */\n  @Watch('active')\n  handleActiveChange(isActive: boolean) {\n    if (isActive) {\n      this.overlayRef.focusTrap();\n    }\n  }\n\n  /** Listeners */\n  @Listen('bsSwipeAction', { target: 'window' })\n  handleBsSwipeAction(e: CustomEvent) {\n    if (this.active) {\n      if (e.detail.direction === TouchDirections.Left) {\n        this.overlayRef.nextSlide();\n      }\n\n      if (e.detail.direction === TouchDirections.Right) {\n        this.overlayRef.previousSlide();\n      }\n    }\n  }\n\n  /** Methods */\n  private handleNextMedia = () => {\n    this.updateIndex(this.activeIndex + 1);\n  };\n\n  private updateIndex = (newValue: number) => {\n    if (this.parsedStoryData.screens.length <= 1) {\n      this.activeIndex = 0;\n\n      return;\n    }\n\n    this.experienceZoneScreenRef.classList.add('fade-out');\n\n    this.experienceZoneScreenRef.addEventListener('animationend', () => {\n      this.experienceZoneScreenRef.classList.remove('fade-out');\n\n      if (newValue > this.parsedStoryData.screens.length - 1) {\n        this.activeIndex = 0;\n      } else if (newValue < 0) {\n        this.activeIndex = this.parsedStoryData.screens.length - 1;\n      } else {\n        this.activeIndex = newValue;\n      }\n    });\n  };\n\n  componentDidLoad() {\n    if (this.active) {\n      this.overlayRef.focusTrap();\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"experience-zone-story\">\n          <bs-dark-overlay\n            ref={(el) => {\n              this.overlayRef = el;\n            }}\n            main-title={this.parsedStoryData.storyTitle}\n            screens={!this.hideNavigation}\n            logo={\n              (this.parsedStoryData.screens[this.activeIndex].layout !==\n                ExperienceZoneLayout.Video &&\n                compareBreakpoint('max', Breakpoint.md)) ||\n              compareBreakpoint('min', Breakpoint.md)\n                ? this.parsedStoryData.storyLogo\n                : ''\n            }\n          >\n            <bs-experience-zone-screen\n              ref={(el) => {\n                this.experienceZoneScreenRef = el;\n              }}\n              active={this.active}\n              onClick={this.handleNextMedia}\n              slot=\"media\"\n              layout={this.parsedStoryData.screens[this.activeIndex].layout}\n              disclaimer={this.parsedStoryData.screens[this.activeIndex].disclaimer}\n              components={this.parsedStoryData.screens[this.activeIndex].components}\n            ></bs-experience-zone-screen>\n            {this.parsedStoryData.screens[this.activeIndex].layout ===\n              ExperienceZoneLayout.Video && (\n              <bs-container slot=\"controller\" contained={true}>\n                <div class=\"screen-footer\">\n                  <bs-youtube-control\n                    videoId={\n                      (\n                        this.parsedStoryData.screens[this.activeIndex].components[0]\n                          .data as BsVideoCard\n                      ).videoId\n                    }\n                  />\n                </div>\n              </bs-container>\n            )}\n          </bs-dark-overlay>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}