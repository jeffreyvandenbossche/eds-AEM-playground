{"version":3,"names":["formContainerCss","BsFormContainer","this","acceptedRequestStatus","async","e","detail","type","formHasErrors","submitHasFailed","validateForm","then","isFormValid","isFormSending","submitRequest","Promise","all","allFields","map","field","validate","invalid","includes","getData","formData","forEach","name","value","response","fetch","action","method","body","JSON","stringify","headers","status","window","location","href","successRedirect","_a","componentDidLoad","deepQuerySelectorAll","hostElement","render","h","Host","class","invalidFormMessage","submitErrorMessage"],"sources":["./src/components/organisms/form-container/form-container.scss?tag=bs-form-container","./src/components/organisms/form-container/form-container.tsx"],"sourcesContent":[":host {\n  @include reset-host;\n}\n\n.form-error {\n  padding: rem(15);\n  margin: rem(20) 0;\n  color: $primary;\n  text-align: center;\n  border: 1px solid $primary;\n}\n\n.is-sending {\n  opacity: 0.5;\n}\n","import { Component, Host, h, State, Element, Listen, Prop } from '@stencil/core';\nimport { deepQuerySelectorAll } from '../../../utils/deepQuerySelectorAll';\n\n/**\n * The form container component.\n */\n@Component({\n  tag: 'bs-form-container',\n  styleUrl: 'form-container.scss',\n  shadow: false,\n})\nexport class BsFormContainer {\n  private allFields: HTMLBsFormFieldElement[];\n\n  private acceptedRequestStatus = [200, 201];\n\n  @Element() hostElement: HTMLBsFormContainerElement;\n\n  /**\n   * State\n   */\n\n  @State() formHasErrors: boolean = false;\n\n  @State() isFormSending: boolean = false;\n\n  @State() submitHasFailed: boolean = false;\n\n  /**\n   * Props\n   */\n\n  /**\n   * The endpoint for the submit request.\n   */\n\n  @Prop() action: string;\n\n  /**\n   * Message to inform the user there are issues with the filled in values.\n   */\n\n  @Prop() invalidFormMessage: string;\n\n  /**\n   * Message to inform the usere something went wrong while submitting the form.\n   */\n\n  @Prop() submitErrorMessage: string;\n\n  /**\n   * The page the user is redirected to in case of a successfull submit.\n   */\n\n  @Prop() successRedirect: string;\n\n  /**\n   * Events\n   */\n\n  @Listen('bsButtonClick')\n  async onBsButtonClickHandler(e: CustomEvent) {\n    if (e.detail.type === 'submit') {\n      this.formHasErrors = false;\n      this.submitHasFailed = false;\n      this.validateForm().then(() => {\n        if (this.isFormValid() && !this.isFormSending) {\n          this.isFormSending = true;\n          this.submitRequest();\n        }\n      });\n    }\n  }\n\n  /**\n   * Methods\n   */\n\n  private async validateForm() {\n    this.formHasErrors = false;\n    await Promise.all(this.allFields.map((field) => field.validate()));\n  }\n\n  private isFormValid() {\n    this.formHasErrors = this.allFields.map((field) => field.invalid).includes(true);\n\n    return !this.formHasErrors;\n  }\n\n  private getData() {\n    const formData = {};\n\n    this.allFields.forEach((field) => {\n      formData[field.name] = field.value;\n    });\n\n    return formData;\n  }\n\n  private async submitRequest() {\n    try {\n      const response = await fetch(this.action, {\n        method: 'POST',\n        body: JSON.stringify(this.getData()),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (this.acceptedRequestStatus.includes(response.status)) {\n        window.location.href = this.successRedirect;\n      } else {\n        this.submitHasFailed = true;\n      }\n    } catch {\n      this.submitHasFailed = true;\n    } finally {\n      this.isFormSending = false;\n    }\n  }\n\n  /**\n   * Lifecycle hooks\n   */\n\n  componentDidLoad() {\n    this.allFields = deepQuerySelectorAll(\n      'bs-form-field',\n      this.hostElement\n    ) as HTMLBsFormFieldElement[];\n  }\n\n  /**\n   * Render\n   */\n\n  render() {\n    return (\n      <Host>\n        <form\n          class={`form-container ${this.isFormSending ? 'is-sending' : ''}`}\n          action={this.action}\n          method=\"dialog\"\n        >\n          <slot />\n          {this.formHasErrors && <p class=\"form-error\">{this.invalidFormMessage}&nbsp;</p>}\n          {this.submitHasFailed && <p class=\"form-error\">{this.submitErrorMessage}&nbsp;</p>}\n        </form>\n      </Host>\n    );\n  }\n}\n"],"mappings":"qHAAA,MAAMA,EAAmB,+7L,MCWZC,EAAe,M,yBAGlBC,KAAAC,sBAAwB,CAAC,IAAK,K,mBAQJ,M,mBAEA,M,qBAEE,M,yHAmCpCC,6BAA6BC,GAC3B,GAAIA,EAAEC,OAAOC,OAAS,SAAU,CAC9BL,KAAKM,cAAgB,MACrBN,KAAKO,gBAAkB,MACvBP,KAAKQ,eAAeC,MAAK,KACvB,GAAIT,KAAKU,gBAAkBV,KAAKW,cAAe,CAC7CX,KAAKW,cAAgB,KACrBX,KAAKY,e,MAULV,qBACNF,KAAKM,cAAgB,YACfO,QAAQC,IAAId,KAAKe,UAAUC,KAAKC,GAAUA,EAAMC,a,CAGhDR,cACNV,KAAKM,cAAgBN,KAAKe,UAAUC,KAAKC,GAAUA,EAAME,UAASC,SAAS,MAE3E,OAAQpB,KAAKM,a,CAGPe,UACN,MAAMC,EAAW,GAEjBtB,KAAKe,UAAUQ,SAASN,IACtBK,EAASL,EAAMO,MAAQP,EAAMQ,KAAK,IAGpC,OAAOH,C,CAGDpB,sBACN,IACE,MAAMwB,QAAiBC,MAAM3B,KAAK4B,OAAQ,CACxCC,OAAQ,OACRC,KAAMC,KAAKC,UAAUhC,KAAKqB,WAC1BY,QAAS,CACP,eAAgB,sBAIpB,GAAIjC,KAAKC,sBAAsBmB,SAASM,EAASQ,QAAS,CACxDC,OAAOC,SAASC,KAAOrC,KAAKsC,e,KACvB,CACLtC,KAAKO,gBAAkB,I,EAEzB,MAAAgC,GACAvC,KAAKO,gBAAkB,I,SAEvBP,KAAKW,cAAgB,K,EAQzB6B,mBACExC,KAAKe,UAAY0B,EACf,gBACAzC,KAAK0C,Y,CAQTC,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,QACEE,MAAO,kBAAkB9C,KAAKW,cAAgB,aAAe,KAC7DiB,OAAQ5B,KAAK4B,OACbC,OAAO,UAEPe,EAAA,aACC5C,KAAKM,eAAiBsC,EAAA,KAAGE,MAAM,cAAc9C,KAAK+C,mBAAkB,KACpE/C,KAAKO,iBAAmBqC,EAAA,KAAGE,MAAM,cAAc9C,KAAKgD,mBAAkB,M"}